Upcoming:
- Updated to latest version of McJtyLib

1.16-4.0.12:
- Updated to latest version of McJtyLib
- The hud for the Processor is full bright again making it easier to read

1.16-4.0.11:
- Fixed programmer card tooltip
- Fixed a problem with the node and processor not doing redstone output correctly

1.16-4.0.10:
- Fixed integration between RFTools Control and RFTools Storage for the screen modules

1.16-4.0.9:
- Fixed a problem with the storage control module which wouldn't fit in the processor anymore

1.16-4.0.8:
- It is again possible to drag items into programmer item slots

1.16-4.0.7:
- Update for McJtyLib tooltip rendering

1.16-4.0.6:
- Popup errors in gui's now fit their text better
- Clipboard support in the programmer is working again

1.16-4.0.5:
- Fixed a bug in the crafting station
- Update to latest McJtyLib

1.16-4.0.4-beta:
- Update to latest McJtyLib

4.0.3-beta:
- Fixed a problem on servers

4.0.2-beta:
- Safer client-side registrations (thread-safety)
- Various cleanups and fixes
- Fixed a problem with spawner configuration loading on servers

4.0.1-beta:
- Fixed a potential exploit which could be used to attack a server

4.0.0-beta:
- First port to 1.16.2

3.0.5:
- Fixed a potential exploit which could be used to attack a server

3.0.4-beta:
- Update for latest McJtyLib

3.0.3-beta:
- Update for latest McJtyLib

3.0.2-beta:
- Fixed a problem with fetching variables and fluids from a processor through a tablet

3.0.1-beta:
- Dependency fix

3.0.0-beta:
- First port of RFTools Control to 1.15
- Removed all oredictionary related parameters
- New 'test_tag' opcode to test if an item contains a tag
- New 'eval_gettags' opcode to get all tags for an item
- The filter module can now also be inserted in the processor (in the expansion slots)
- New 'test_filter' opcode to test if an item matches a filter
- New 'do_fetchitems_filter' opcode to fetch items from an inventory that match the given filter
- Fixed the recipes for the vanilla recipe book
- Moved most of the configs from common to server (so that they are saved with the world and synced to the client)

2.0.2:
- Fixed a bug where the storage card module wouldn't always get recognized by the processor
- Added a new 'eval_getcraftingcard'. This can get the crafting card out of an inventory that can craft the given item
- Added ore dictionary support for 'do_pushworkbench'
- Added ore dictionary support for 'eval_ingredients'
- The 'net list' command will now also show crafting stations

2.0.1:
- Fixed a bug where oredictionary matching was broken for 'get_ingredients_smart'
- Fixed a problem with the item tooltip in the crafting station
- The 'eval_item' opcode will no longer give an error if it returns an empty item. An empty item is valid too

2.0.0:
- Depends on McJtyLib 3.5.0!
- Fixed dropping liquid buckets in the fluid opcodes
- Small improvement on error logging. The index of the program card that is causing the error is now also printed
- There was a chance that a programmer would not correctly save its current program on exit. Loading the world again would revert to an older program. This has now been fixed
- If the programmer gets a redstone signal it will save the current program to the card. This allows automation to save a program to many cards
- New opcode ('eval_countcrafts') to count the possible number of crafting operations given a card and an inventory
- New opcode ('do_vector_sort') to sort a vector
- New opcode ('eval_vector_indices') to generate a vector of integers starting with 0
- Converting a vector to a string will now give a short summary of its contents instead of just []
- New 'length' function which is a more convenient way to calculate the length of a string or vector
- The 'do_getingredients_smart' and 'do_getingredients' opcodes now have optional 'oredict' parameters so that you can enable oredictionary support for checking ingredients
- New 'watch' commands that can help debug a program by watching when a variable changes. You can then log that change or set the program in debug mode
- Added new 'comment' opcode that acts like a wire but has the extra ability to attach three comment lines. This makes it easier to document your programs
- New 'test_eq_item' opcode which is a more flexible way to test for item equality. It can optionally use metadata, NBT, and oredictionary to do the equality test
- Fixed a problem where opcodes that work with 'numbers' didn't have access to functions that return integers
- The 'eval_tuple' opcode now also has a way to get a tuple from a variable

1.9.3:
- Needs McJtyLib 3.1.0
- Support for COFH RF API is removed. Only Forge Energy is supported now

1.9.2:
- Made compatible with RFTools 7.58

1.9.1:
- Fixed a bug with the vector pop operation. It would always return an empty list

1.9.0:
- Made compatible with the latest McJtyLib (3.0.0)

1.9.0alpha:
- Made compatible with the latest McJtyLib (3.0.0)
